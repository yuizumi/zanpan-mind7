※ -*- coding: euc-jp -*-

※　TODO(yuizumi): オーバーフローへの対策

実数は　変数と　等価。

正規化するとは
　　指数は　変数　仮数は　変数
　　指数と　仮数に　入れ
　　ここから
　　　　仮数が　００ＦＦＦＦＦＦＨ　以下である
　　　　　　ならば　打ち切り
　　　　　　つぎに
　　　　指数を　一つ増加して
　　　　仮数を　１ビット　右シフトして　仮数に　入れる
　　繰り返し
　　ここから
　　　　仮数が　００８０００００Ｈ　以上である
　　　　　　ならば　打ち切り
　　　　　　つぎに
　　　　指数を　一つ減少して
　　　　仮数を　１ビット　左シフトして　仮数に　入れる
　　繰り返し
　　指数と　仮数を　返す。

実数合成するとは
　　正規化して
　　※　仮数、指数、符号
　　００７ＦＦＦＦＦＨとの　ＡＮＤをとり
　　交換して
　　※　指数、仮数、符号
　　００ＦＦＨとの　ＡＮＤをとり
　　２３ビット　左シフトしたものとの　ＯＲをとり
　　※　指数＋仮数、符号
　　交換して
　　※　符号、指数＋仮数
　　負？　ならば　８０００００００Ｈとの　ＯＲをとる
　　※　符号＋指数＋仮数
　　つぎに。

実数分解するとは
　　引数は　変数
　　引数に　入れ
　　引数が　負？　ならば　−１　さもなければ　＋１　つぎに
　　引数と　７Ｆ８０００００Ｈの　ＡＮＤをとり　２３ビット　右シフトしたものと
　　引数と　００７ＦＦＦＦＦＨの　ＡＮＤをとったものを　返す。

仮数分解するとは
　　引数は　変数
　　００８０００００Ｈとの　ＯＲをとり　引数に　入れ
　　引数を　１２ビット　右シフトして　０ＦＦＦＨとの　ＡＮＤをとったものと
　　引数を　０ＦＦＦＨとの　ＡＮＤをとったものを　返す。

実数に変換するとは
　　符号は　変数　指数は　変数　仮数は　変数
　　複写して　負？
　　　　ならば　負数をとって　仮数に　入れ　符号に　−１を　入れる
　　　　さもなければ　仮数に　入れる
　　つぎに
　　※　本来の嵩上げ＝１２７、左シフト調整分＝２３
　　符号と　１５０と　仮数を　実数合成する。
　　
実数として掛けるとは
　　符号Ａは　変数　指数Ａは　変数　仮数Ａ上は　変数　仮数Ａ下は　変数
　　符号Ｂは　変数　指数Ｂは　変数　仮数Ｂ上は　変数　仮数Ｂ下は　変数
　　指数は　変数　仮数は　変数

　　実数分解して　仮数分解して
　　符号Ｂと　指数Ｂと　仮数Ｂ上と　仮数Ｂ下に　入れ
　　実数分解して　仮数分解して
　　符号Ａと　指数Ａと　仮数Ａ上と　仮数Ａ下に　入れ
　　符号Ａと　符号Ｂを　掛けて
　　（これを符号とする）
　　※　もとの嵩上げ＝１２７、計算上の嵩上げ＝４、調整分＝−１
　　指数Ａと　指数Ｂを　加えて　１３０を　引いて
　　（これを指数とする）
　　仮数Ａ下と　仮数Ｂ下を　掛けて　４ビット　左シフトして
　　１２ビット　右シフトして
　　仮数Ａ下と　仮数Ｂ上を　掛けて　４ビット　左シフトして　加えて　
　　仮数Ａ上と　仮数Ｂ下を　掛けて　４ビット　左シフトして　加えて
　　１２ビット　右シフトして
　　仮数Ａ上と　仮数Ｂ上を　掛けて　４ビット　左シフトして　加えて
　　（これを仮数とする）
　　実数合成する。
　　

実数表示するとは
　　実数分解して
　　数値表示して　「:」を　表示して
　　数値表示して　「:」を　表示して
　　数値表示する。
　　

メインとは
　　３を　実数変換し　２を　実数変換し　実数として掛けて
　　数値表示して　改行する。
